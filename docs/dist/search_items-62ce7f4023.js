searchNodes=[{"doc":"Behavior providing __crux_command__/0 to access underlying command data. Modules implementing this behavior: Crux.Interaction.ApplicationCommand.ChatInput Crux.Interaction.ApplicationCommand.Message Crux.Interaction.ApplicationCommand.User","ref":"Crux.Interaction.ApplicationCommand.html","title":"Crux.Interaction.ApplicationCommand","type":"behaviour"},{"doc":"A term representing the defined command, that when JSON encoded, is compatible with what the Discord API expects. See the Application Commands section of Crux.Rest for usages.","ref":"Crux.Interaction.ApplicationCommand.html#c:__crux_command__/0","title":"Crux.Interaction.ApplicationCommand.__crux_command__/0","type":"callback"},{"doc":"Provides a DSL to define chat input application commands A.K.A. slash commands. Restrictions Names must consist only of lowercase characters (and -) and may be up to 32 characters long. Descriptions may be up to 100 characters long without further restrictions. These name and description restrictions also apply to options. For choices the name and descriptions both may be up to 100 characters long without further restrictions. A chat input application command may have up to 25 subcommand groups 25 subcommand 25 options 25 choices per grouping / level. Maximum of 4000 characters for combined name, description, and value properties for each command and its subcommands and groups. It's recommend to checkout the Discord Developer Documentation on Chat Input Application Commands . Examples A basic ping command: defmodule MyBot.Ping do use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;ping&quot; @description &quot;Pongs right back at you!&quot; end A command using choices: defmodule MyBot.Greet do use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;greet&quot; @description &quot;Greets a user&quot; @required true string &quot;type&quot; , &quot;The type of the greeting&quot; do choice &quot;politely&quot; , &quot;politely&quot; choice &quot;casually&quot; , &quot;casually&quot; end @required true user &quot;user&quot; , &quot;The user you&#39;d like to greet&quot; end A command using sub commands. Sub command groups can be used to nest one level further: defmodule MyBot.Info do use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;info&quot; @description &quot;Shows basic info about a user, channel, or role.&quot; # Only specific users / roles can use this command. (Needs to be separately specified per guild) @default_permission false subcommand &quot;user&quot; , &quot;Show basic info about a user&quot; do @required true user &quot;user&quot; , &quot;The user you want to show info about&quot; end subcommand &quot;channel&quot; , &quot;Show basic info about a channel&quot; do @required true channel &quot;channel&quot; , &quot;The channel you want to show basic info about&quot; end subcommand &quot;role&quot; , &quot;Show basic info about a role&quot; do @required true role &quot;role&quot; , &quot;The role you want to show basic info about&quot; end end A command using autocomplete to suggest the user options to chose from. defmodule MyBot.Tag do @moduledoc false use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;tag&quot; @description &quot;Shows a tag.&quot; @required true @autocomplete true string &quot;name&quot; , &quot;The name of the tag&quot; end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html","title":"Crux.Interaction.ApplicationCommand.ChatInput","type":"module"},{"doc":"Defines a boolean option, can optionally be @required true . @required true boolean &quot;enabled&quot; , &quot;Whether you want to enable or disable this.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#boolean/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.boolean/2","type":"macro"},{"doc":"Defines a channel option, can optionally be @required true . @required true channel &quot;channel&quot; , &quot;The channel you notifications to be sent to.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#channel/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.channel/2","type":"macro"},{"doc":"Defines choices for string/3 , integer/3 , and number/3 options. Note that this is mutually exclusive with @autocomplete true . string &quot;foo&quot; , &quot;foos&quot; do choice &quot;bar&quot; , &quot;bar&quot; choice &quot;baz&quot; , &quot;baz&quot; end integer &quot;foo&quot; , &quot;foos&quot; do choice &quot;bar&quot; , 1 choice &quot;baz&quot; , 2 end number &quot;foo&quot; , &quot;foos&quot; do choice &quot;bar&quot; , 1 choice &quot;baz&quot; , 1.5 end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#choice/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.choice/2","type":"macro"},{"doc":"Defines an integer option, can optionally be @required true and @autocomplete true . @required true integer &quot;amount&quot; , &quot;The amount of ðŸ§€ you want to donate.&quot; You can optionally define choices the user has to pick one from, see choice/2 .","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#integer/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.integer/3","type":"macro"},{"doc":"Defines a mentionable option, this is an union of user/2 and role/2 , can optionally be @required true . @required true mentionable &quot;target&quot; , &quot;The user or role to block from this channel&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#mentionable/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.mentionable/2","type":"macro"},{"doc":"Defines a number option, can optionally be @required true and @autocomplete true . @required true number &quot;number&quot; , &quot;Give me some number&quot; You can optionally define choices the user has to pick one from, see choice/2 .","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#number/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.number/3","type":"macro"},{"doc":"Defines a role option, can optionally be @required true . @required true role &quot;role&quot; , &quot;The role you want to be mentioned alongside notifications.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#role/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.role/2","type":"macro"},{"doc":"Defines a string option, can optionally be @required true and @autocomplete true . @required true string &quot;name&quot; , &quot;The name of the thing you want to create.&quot; You can optionally define choices the user has to pick one from, see choice/2 .","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#string/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.string/3","type":"macro"},{"doc":"Defines a sub command option. subcommand &quot;create&quot; , &quot;Creates... something!&quot; do # Optionally further options end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#subcommand/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.subcommand/3","type":"macro"},{"doc":"Defines a sub command group option. subcommand_group &quot;create&quot; , &quot;Creates... something!&quot; do # Required sub commands end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#subcommand_group/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.subcommand_group/3","type":"macro"},{"doc":"Defines a user option, can optionally be @required true . @required true user &quot;user&quot; , &quot;The user you want to interact with.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#user/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.user/2","type":"macro"},{"doc":"Provides a DSL to define message application commands A.K.A. context menus. Names may have spaces and can be up to 32 characters long. It's recommend to checkout the Discord Developer Documentation on Message Commands . Examples defmodule MyBot.StarMessage do use Crux.Interaction.ApplicationCommand.Message @name &quot;Star this Message&quot; # Message commands can&#39;t have a @description end","ref":"Crux.Interaction.ApplicationCommand.Message.html","title":"Crux.Interaction.ApplicationCommand.Message","type":"module"},{"doc":"Provides a DSL to define user application commands A.K.A. context menus. Names may have spaces and can be up to 32 characters long. It's recommend to checkout the Discord Developer Documentation on User Commands . Examples defmodule MyBot.BlockUser do use Crux.Interaction.ApplicationCommand.User @name &quot;Block this User&quot; # User commands can&#39;t have a @description end","ref":"Crux.Interaction.ApplicationCommand.User.html","title":"Crux.Interaction.ApplicationCommand.User","type":"module"},{"doc":"Raised when an invalid application command chat input choice name or description was specified. Also raised when too many or duplicated choices were specified. See valid_name?/1 and valid_choice?/2","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice","type":"exception"},{"doc":"Whether the given value is valid for a chat input choice value. Choice value validity depend on their enclosing option: string/3 -&gt; must be a [1,100] characters long string integer/3 -&gt; must be an integer in [-2^53,+2^53] number/3 -&gt; must be a double in [-2^53,+2^53]","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice.html#valid_value?/2","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice.valid_value?/2","type":"function"},{"doc":"Raised when an invalid @default_permission was specified for an application command chat input. I.e. not a boolean. See: valid?/1","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission","type":"exception"},{"doc":"Whether th given term is a valid default permission.","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission.html#valid?/1","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission.valid?/1","type":"function"},{"doc":"Raised when an invalid description was specified anywhere. See: valid?/1","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription","type":"exception"},{"doc":"Whether the given description is valid for a chat input or a chat input option. A description is valid, if it's [1,100] characters long.","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription.html#valid?/1","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription.valid?/1","type":"function"},{"doc":"Raised when an invalid name was specified anywhere. See: valid?/1","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName","type":"exception"},{"doc":"Whether the given name is valid. For choice names: The name must be [1,100] characters long For all else: The name must be [1,32] characters long. For chat inputs additionally: The name must only consist of lowercase characters or - .","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName.html#valid?/2","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName.valid?/2","type":"function"},{"doc":"Raised when an option is specified where it's not valid. E.g. when a subcommand/4 is specified after a string/2,3 or a choice/2 in a subcommand/4 's do block. Also raised when an invalid option modifier was specified. E.g. when @required is used where it's not allowed. Also raised when too many or duplicated options were specified.","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidState.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidState","type":"exception"}]