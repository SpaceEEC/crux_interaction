searchNodes=[{"doc":"Behavior providing __crux_command__/0 to access underlying command data. Modules implementing this behavior: Crux.Interaction.ApplicationCommand.ChatInput Crux.Interaction.ApplicationCommand.Message Crux.Interaction.ApplicationCommand.User","ref":"Crux.Interaction.ApplicationCommand.html","title":"Crux.Interaction.ApplicationCommand","type":"behaviour"},{"doc":"A term representing the defined command, that when JSON encoded, is compatible with what the Discord API expects. See the Application Commands section of Crux.Rest for usages.","ref":"Crux.Interaction.ApplicationCommand.html#c:__crux_command__/0","title":"Crux.Interaction.ApplicationCommand.__crux_command__/0","type":"callback"},{"doc":"Handle and respond to interactions.","ref":"Crux.Interaction.ApplicationCommand.html#c:handle/2","title":"Crux.Interaction.ApplicationCommand.handle/2","type":"callback"},{"doc":"Handle autocomplete interactions. Only applicable if the defined interaction supports and registers such.","ref":"Crux.Interaction.ApplicationCommand.html#c:handle_autocomplete/2","title":"Crux.Interaction.ApplicationCommand.handle_autocomplete/2","type":"callback"},{"doc":"All modules that use one of the in the moduledoc mentioned modules.","ref":"Crux.Interaction.ApplicationCommand.html#t:t/0","title":"Crux.Interaction.ApplicationCommand.t/0","type":"type"},{"doc":"Provides a DSL to define chat input application commands A.K.A. slash commands. Restrictions Names must consist only of lowercase characters (and -) and may be up to 32 characters long. Descriptions may be up to 100 characters long without further restrictions. These name and description restrictions also apply to options. For choices the name and descriptions both may be up to 100 characters long without further restrictions. A chat input application command may have up to 25 subcommand groups 25 subcommand 25 options 25 choices per grouping / level. Maximum of 4000 characters for combined name, description, and value properties for each command and its subcommands and groups. It's recommend to checkout the Discord Developer Documentation on Chat Input Application Commands . Examples A basic ping command: defmodule MyBot.Ping do use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;ping&quot; @description &quot;Pongs right back at you!&quot; end A command using choices: defmodule MyBot.Greet do use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;greet&quot; @description &quot;Greets a user&quot; @required true string &quot;type&quot; , &quot;The type of the greeting&quot; do choice &quot;politely&quot; , &quot;politely&quot; choice &quot;casually&quot; , &quot;casually&quot; end @required true user &quot;user&quot; , &quot;The user you&#39;d like to greet&quot; end A command using sub commands. Sub command groups can be used to nest one level further: defmodule MyBot.Info do use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;info&quot; @description &quot;Shows basic info about a user, channel, or role.&quot; # Only specific users / roles can use this command. (Needs to be separately specified per guild) @default_permission false subcommand &quot;user&quot; , &quot;Show basic info about a user&quot; do @required true user &quot;user&quot; , &quot;The user you want to show info about&quot; end subcommand &quot;channel&quot; , &quot;Show basic info about a channel&quot; do @required true channel &quot;channel&quot; , &quot;The channel you want to show basic info about&quot; end subcommand &quot;role&quot; , &quot;Show basic info about a role&quot; do @required true role &quot;role&quot; , &quot;The role you want to show basic info about&quot; end end A command using autocomplete to dynamically suggest the user options to chose from as they are typing: defmodule MyBot.Tag do @moduledoc false use Crux.Interaction.ApplicationCommand.ChatInput @name &quot;tag&quot; @description &quot;Shows a tag.&quot; @required true @autocomplete true string &quot;name&quot; , &quot;The name of the tag&quot; end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html","title":"Crux.Interaction.ApplicationCommand.ChatInput","type":"module"},{"doc":"Defines a boolean option, can optionally be @required true . @required true boolean &quot;enabled&quot; , &quot;Whether you want to enable or disable this.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#boolean/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.boolean/2","type":"macro"},{"doc":"Defines a channel option, can optionally be @required true . @required true channel &quot;channel&quot; , &quot;The channel you notifications to be sent to.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#channel/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.channel/2","type":"macro"},{"doc":"Defines choices for string/3 , integer/3 , and number/3 options. Note that this is mutually exclusive with @autocomplete true . string &quot;foo&quot; , &quot;foos&quot; do choice &quot;bar&quot; , &quot;bar&quot; choice &quot;baz&quot; , &quot;baz&quot; end integer &quot;foo&quot; , &quot;foos&quot; do choice &quot;bar&quot; , 1 choice &quot;baz&quot; , 2 end number &quot;foo&quot; , &quot;foos&quot; do choice &quot;bar&quot; , 1 choice &quot;baz&quot; , 1.5 end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#choice/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.choice/2","type":"macro"},{"doc":"Defines an integer option, can optionally be @required true and @autocomplete true . @required true integer &quot;amount&quot; , &quot;The amount of ðŸ§€ you want to donate.&quot; You can optionally define choices the user has to pick one from, see choice/2 .","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#integer/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.integer/3","type":"macro"},{"doc":"Defines a mentionable option, this is an union of user/2 and role/2 , can optionally be @required true . @required true mentionable &quot;target&quot; , &quot;The user or role to block from this channel&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#mentionable/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.mentionable/2","type":"macro"},{"doc":"Defines a number option, can optionally be @required true and @autocomplete true . @required true number &quot;number&quot; , &quot;Give me some number&quot; You can optionally define choices the user has to pick one from, see choice/2 .","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#number/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.number/3","type":"macro"},{"doc":"Defines a role option, can optionally be @required true . @required true role &quot;role&quot; , &quot;The role you want to be mentioned alongside notifications.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#role/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.role/2","type":"macro"},{"doc":"Defines a string option, can optionally be @required true and @autocomplete true . @required true string &quot;name&quot; , &quot;The name of the thing you want to create.&quot; You can optionally define choices the user has to pick one from, see choice/2 .","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#string/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.string/3","type":"macro"},{"doc":"Defines a sub command option. subcommand &quot;create&quot; , &quot;Creates... something!&quot; do # Optionally further options end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#subcommand/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.subcommand/3","type":"macro"},{"doc":"Defines a sub command group option. subcommand_group &quot;create&quot; , &quot;Creates... something!&quot; do # Required sub commands end","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#subcommand_group/3","title":"Crux.Interaction.ApplicationCommand.ChatInput.subcommand_group/3","type":"macro"},{"doc":"Defines a user option, can optionally be @required true . @required true user &quot;user&quot; , &quot;The user you want to interact with.&quot;","ref":"Crux.Interaction.ApplicationCommand.ChatInput.html#user/2","title":"Crux.Interaction.ApplicationCommand.ChatInput.user/2","type":"macro"},{"doc":"Provides a DSL to define message application commands A.K.A. context menus. Names may have spaces and can be up to 32 characters long. It's recommend to checkout the Discord Developer Documentation on Message Commands . Examples defmodule MyBot.StarMessage do use Crux.Interaction.ApplicationCommand.Message @name &quot;Star this Message&quot; # Message commands can&#39;t have a @description end","ref":"Crux.Interaction.ApplicationCommand.Message.html","title":"Crux.Interaction.ApplicationCommand.Message","type":"module"},{"doc":"Provides a DSL to define user application commands A.K.A. context menus. Names may have spaces and can be up to 32 characters long. It's recommend to checkout the Discord Developer Documentation on User Commands . Examples defmodule MyBot.BlockUser do use Crux.Interaction.ApplicationCommand.User @name &quot;Block this User&quot; # User commands can&#39;t have a @description end","ref":"Crux.Interaction.ApplicationCommand.User.html","title":"Crux.Interaction.ApplicationCommand.User","type":"module"},{"doc":"Components are interactive elements that may be added to messages or be sent as part of a response to an interaction. There are the following components: Crux.Interaction.Component.ActionRow Crux.Interaction.Component.Button Crux.Interaction.Component.InputText Crux.Interaction.Component.SelectMenu","ref":"Crux.Interaction.Component.html","title":"Crux.Interaction.Component","type":"module"},{"doc":"","ref":"Crux.Interaction.Component.html#t:t/0","title":"Crux.Interaction.Component.t/0","type":"type"},{"doc":"An action row is a non-interactive container component for other types of components. The allowed components within an action row depends on where its used. For action rows the following limitations apply: You can have at most 5 action rows within a message / interaction. Action rows cannot contain action rows. Action rows cannot mix components (as of yet). You may also want to checkout the Discord Developer Documentation about action rows .","ref":"Crux.Interaction.Component.ActionRow.html","title":"Crux.Interaction.Component.ActionRow","type":"module"},{"doc":"Add one or multiple components to an action row.","ref":"Crux.Interaction.Component.ActionRow.html#add_components/2","title":"Crux.Interaction.Component.ActionRow.add_components/2","type":"function"},{"doc":"Create a new action row and optionally initialize it with the given component(s).","ref":"Crux.Interaction.Component.ActionRow.html#new/1","title":"Crux.Interaction.Component.ActionRow.new/1","type":"function"},{"doc":"","ref":"Crux.Interaction.Component.ActionRow.html#t:t/0","title":"Crux.Interaction.Component.ActionRow.t/0","type":"type"},{"doc":"Buttons are interactive components. For buttons the following limitations apply: Buttons must be in action rows. There may be up to 5 buttons per action row. All buttons require at least one of label and emoji . You may also want to checkout the Discord Developer Documentation about buttons .","ref":"Crux.Interaction.Component.Button.html","title":"Crux.Interaction.Component.Button","type":"module"},{"doc":"The danger style, a red button.","ref":"Crux.Interaction.Component.Button.html#button_style_danger/0","title":"Crux.Interaction.Component.Button.button_style_danger/0","type":"function"},{"doc":"The links style, a grey button with a &quot;link&quot; icon to signify its purpose.","ref":"Crux.Interaction.Component.Button.html#button_style_link/0","title":"Crux.Interaction.Component.Button.button_style_link/0","type":"function"},{"doc":"The primary style, a blurple button.","ref":"Crux.Interaction.Component.Button.html#button_style_primary/0","title":"Crux.Interaction.Component.Button.button_style_primary/0","type":"function"},{"doc":"The secondary style, a grey button.","ref":"Crux.Interaction.Component.Button.html#button_style_secondary/0","title":"Crux.Interaction.Component.Button.button_style_secondary/0","type":"function"},{"doc":"The success style, a green button.","ref":"Crux.Interaction.Component.Button.html#button_style_success/0","title":"Crux.Interaction.Component.Button.button_style_success/0","type":"function"},{"doc":"Create a new button using the given style and custom_id / url . See the button_style___ functions in this module. There is a maximum of 100 characters for the custom_id (doesn't apply to the link style).","ref":"Crux.Interaction.Component.Button.html#new/2","title":"Crux.Interaction.Component.Button.new/2","type":"function"},{"doc":"Set whether a button is disabled. (I.e. can't be clicked)","ref":"Crux.Interaction.Component.Button.html#put_disabled/2","title":"Crux.Interaction.Component.Button.put_disabled/2","type":"function"},{"doc":"Set the emoji for a button.","ref":"Crux.Interaction.Component.Button.html#put_emoji/2","title":"Crux.Interaction.Component.Button.put_emoji/2","type":"function"},{"doc":"Set the label for a button. There is a maximum of 80 characters.","ref":"Crux.Interaction.Component.Button.html#put_label/2","title":"Crux.Interaction.Component.Button.put_label/2","type":"function"},{"doc":"Available button styles: primary - 1 secondary - 2 success - 3 danger - 4 link - 5 There is an image preview on the Discord Developer Documentation .","ref":"Crux.Interaction.Component.Button.html#t:button_style/0","title":"Crux.Interaction.Component.Button.button_style/0","type":"type"},{"doc":"","ref":"Crux.Interaction.Component.Button.html#t:t/0","title":"Crux.Interaction.Component.Button.t/0","type":"type"},{"doc":"THIS IS NOT RELEASED / AVAILABLE YET. EVERYTHING IS SUBJECT TO CHANGE. For input text the following limitations apply: Input text may only be used in an interaction response. (Not in regular messages) Input text must be in action rows. There may only be one input text per action row. You may also want to checkout the Discord Developer Documentation about input text. (Does not exist yet)","ref":"Crux.Interaction.Component.InputText.html","title":"Crux.Interaction.Component.InputText","type":"module"},{"doc":"Create an input text with the given custom_id and label .","ref":"Crux.Interaction.Component.InputText.html#new/3","title":"Crux.Interaction.Component.InputText.new/3","type":"function"},{"doc":"Set the maximum length required for the text.","ref":"Crux.Interaction.Component.InputText.html#put_max_length/2","title":"Crux.Interaction.Component.InputText.put_max_length/2","type":"function"},{"doc":"Set the minimum length required for the text.","ref":"Crux.Interaction.Component.InputText.html#put_min_length/2","title":"Crux.Interaction.Component.InputText.put_min_length/2","type":"function"},{"doc":"Set the placeholder text to show if no text was provided (yet).","ref":"Crux.Interaction.Component.InputText.html#put_placeholder/2","title":"Crux.Interaction.Component.InputText.put_placeholder/2","type":"function"},{"doc":"Set whether the field may be submitted empty.","ref":"Crux.Interaction.Component.InputText.html#put_required/2","title":"Crux.Interaction.Component.InputText.put_required/2","type":"function"},{"doc":"Specify a value to be already prefilled into the field.","ref":"Crux.Interaction.Component.InputText.html#put_value/2","title":"Crux.Interaction.Component.InputText.put_value/2","type":"function"},{"doc":"The paragraph text syle, a multi line text box.","ref":"Crux.Interaction.Component.InputText.html#text_style_paragraph/0","title":"Crux.Interaction.Component.InputText.text_style_paragraph/0","type":"function"},{"doc":"The short text style, a single row for text.","ref":"Crux.Interaction.Component.InputText.html#text_style_short/0","title":"Crux.Interaction.Component.InputText.text_style_short/0","type":"function"},{"doc":"","ref":"Crux.Interaction.Component.InputText.html#t:t/0","title":"Crux.Interaction.Component.InputText.t/0","type":"type"},{"doc":"Availabel text styles: short - 1 paragraph - 2","ref":"Crux.Interaction.Component.InputText.html#t:text_style/0","title":"Crux.Interaction.Component.InputText.text_style/0","type":"type"},{"doc":"Select menus are another interactive component that renders on messages. For select menus the following limitations apply: Select menus must be in action rows. There may be one select menu in an action row. You may also want to checkout the Discord Developer Documentation about select menus .","ref":"Crux.Interaction.Component.SelectMenu.html","title":"Crux.Interaction.Component.SelectMenu","type":"module"},{"doc":"Add one or multiple options to the select menu.","ref":"Crux.Interaction.Component.SelectMenu.html#add_options/2","title":"Crux.Interaction.Component.SelectMenu.add_options/2","type":"function"},{"doc":"Create a new select menu with the given custom_id and option(s). There is a maximum of 100 characters for the custom id and a limit of 25 options.","ref":"Crux.Interaction.Component.SelectMenu.html#new/2","title":"Crux.Interaction.Component.SelectMenu.new/2","type":"function"},{"doc":"Set whether the select menu is disabled.","ref":"Crux.Interaction.Component.SelectMenu.html#put_disabled/2","title":"Crux.Interaction.Component.SelectMenu.put_disabled/2","type":"function"},{"doc":"Set the maximum number of items that may be chosen.","ref":"Crux.Interaction.Component.SelectMenu.html#put_max_values/2","title":"Crux.Interaction.Component.SelectMenu.put_max_values/2","type":"function"},{"doc":"Set the minimum number of items that must be chosen.","ref":"Crux.Interaction.Component.SelectMenu.html#put_min_values/2","title":"Crux.Interaction.Component.SelectMenu.put_min_values/2","type":"function"},{"doc":"Set a custom placeholder to be shown if nothing is selected. There is a maximum of 100 characters allowed.","ref":"Crux.Interaction.Component.SelectMenu.html#put_placeholder/2","title":"Crux.Interaction.Component.SelectMenu.put_placeholder/2","type":"function"},{"doc":"","ref":"Crux.Interaction.Component.SelectMenu.html#t:t/0","title":"Crux.Interaction.Component.SelectMenu.t/0","type":"type"},{"doc":"An option used in a select menu. You may also want to checkout the Discord Developer Documentation about select menu options .","ref":"Crux.Interaction.Component.SelectMenu.Option.html","title":"Crux.Interaction.Component.SelectMenu.Option","type":"module"},{"doc":"Create a new option using the given a label and value . There is a 100 character limit for the label and a 100 character limit for the value .","ref":"Crux.Interaction.Component.SelectMenu.Option.html#new/2","title":"Crux.Interaction.Component.SelectMenu.Option.new/2","type":"function"},{"doc":"Set whether this option will be selected by default.","ref":"Crux.Interaction.Component.SelectMenu.Option.html#put_default/2","title":"Crux.Interaction.Component.SelectMenu.Option.put_default/2","type":"function"},{"doc":"Set the description shown below the option name.","ref":"Crux.Interaction.Component.SelectMenu.Option.html#put_description/2","title":"Crux.Interaction.Component.SelectMenu.Option.put_description/2","type":"function"},{"doc":"Set the emoji to display alongside the option name.","ref":"Crux.Interaction.Component.SelectMenu.Option.html#put_emoji/2","title":"Crux.Interaction.Component.SelectMenu.Option.put_emoji/2","type":"function"},{"doc":"","ref":"Crux.Interaction.Component.SelectMenu.Option.html#t:t/0","title":"Crux.Interaction.Component.SelectMenu.Option.t/0","type":"type"},{"doc":"Behavior to provide commands and module to handle incoming interaction payloads to respond accordingly. Usage An example providing just registered commands: defmodule MyApp.Executor do @behaviour Crux.Interaction.Executor @commands Crux.Interaction.Executor . map_commands ( [ MyApp.Greet , MyApp.Info , MyApp.Ping , MyApp.Tag , ] ) @impl Crux.Interaction.Executor def get_commands ( ) do @commands end # Optional callbacks here, as needed / wanted. end You could also not register any commands and just use the callbacks to handle interactions: defmodule MyApp.Executor do @behaviour Crux.Interaction.Executor @impl Crux.Interaction.Executor def get_commands ( ) , do : [ ] @impl Crux.Interaction.Executor def handle_chat_input ( interaction , context ) do # Return some response end # Other optional callbacks here, as needed / wanted. end Or, of course, something in-between. Plug Usage You just need to plug your executor module into Crux.Interaction.Plug , see its moduledoc for a very small example. The plug will then take care of sending the response to Discord. Gateway Usage If you are using the gateway to receive interactions, you need to call execute/3 yourself and also send the response back yourself too. That could look somewhat like this: def handle_event ( :INTERACTION_CREATE , interaction , _shard ) do Crux.Interaction.Executor . execute ( MyApp.Executor , interaction , %{ some : :context } ) # The context is optional and can be any term |&gt; case do { :ok , response , _context } -&gt; MyApp.Rest . create_interaction_response! ( interaction . id , interaction . token , response ) { :error , error_type , _context } -&gt; # Do something with the error, see `t:error_type/0` for possible error types. end end","ref":"Crux.Interaction.Executor.html","title":"Crux.Interaction.Executor","type":"behaviour"},{"doc":"Handles an incoming interaction dispatching it to the relevant handle_ function either in this module or in one of the command modules. If no suitable function could be determine an error response will be returned. For ping interactions this function will just return a pong response.","ref":"Crux.Interaction.Executor.html#execute/3","title":"Crux.Interaction.Executor.execute/3","type":"function"},{"doc":"Function returning all commands that the executor should work with. See also map_commands/1 to map a list of Crux.Interaction.ApplicationCommand.t/0 to the expected return value.","ref":"Crux.Interaction.Executor.html#c:get_commands/0","title":"Crux.Interaction.Executor.get_commands/0","type":"callback"},{"doc":"Fallback function to handle incoming chat input application command interaction for commands that are not registered or that didn't register a Crux.Interaction.ApplicationCommand.handle_autocomplete/2 function.","ref":"Crux.Interaction.Executor.html#c:handle_autocomplete/2","title":"Crux.Interaction.Executor.handle_autocomplete/2","type":"callback"},{"doc":"Fallback function to handle incoming chat input application command interaction for commands that are not registered or that didn't register a Crux.Interaction.ApplicationCommand.handle/2 function.","ref":"Crux.Interaction.Executor.html#c:handle_chat_input/2","title":"Crux.Interaction.Executor.handle_chat_input/2","type":"callback"},{"doc":"Function to handle all incoming component interactions.","ref":"Crux.Interaction.Executor.html#c:handle_component/2","title":"Crux.Interaction.Executor.handle_component/2","type":"callback"},{"doc":"Fallback to handle incoming interactions of unknown (sub-)types.","ref":"Crux.Interaction.Executor.html#c:handle_interaction/2","title":"Crux.Interaction.Executor.handle_interaction/2","type":"callback"},{"doc":"Function to handle all incoming modal interactions.","ref":"Crux.Interaction.Executor.html#c:handle_modal/2","title":"Crux.Interaction.Executor.handle_modal/2","type":"callback"},{"doc":"Maps a list of commands to a map expected by get_commands/0 . You do not necessarily need to use this function, but it helps mapping them into the correct format.","ref":"Crux.Interaction.Executor.html#map_commands/1","title":"Crux.Interaction.Executor.map_commands/1","type":"function"},{"doc":"Sends a response immediately. Useful / needed if the handler function needs more than 3 seconds to send a response or additional work after the initial reply is required. Returns :error if a response was already sent, otherwise :ok . Note that the handler function must return nil after using this method otherwise an error will be raised.","ref":"Crux.Interaction.Executor.html#reply/1","title":"Crux.Interaction.Executor.reply/1","type":"function"},{"doc":"A context to pass to execute/3 , which will be forwarded and maybe updated in handle_ callbacks.","ref":"Crux.Interaction.Executor.html#t:context/0","title":"Crux.Interaction.Executor.context/0","type":"type"},{"doc":"Available error types: :unkown_type - The interaction type or sub-type (e.g. application commands) is unknown :unhandled_type - The executor does not register an appropriate handler for this type of interaction (i.e. component / modal) :unknown_command - The executor does not know about the given command :unhandled_command - The executor does know about the given command, but the command doesn't register a handler :no_return - A responsible handler was called, but it returned nil . New types might be added in the future","ref":"Crux.Interaction.Executor.html#t:error_type/0","title":"Crux.Interaction.Executor.error_type/0","type":"type"},{"doc":"Possible return values for the handle_ callbacks. See also: reply/1","ref":"Crux.Interaction.Executor.html#t:handle_return/0","title":"Crux.Interaction.Executor.handle_return/0","type":"type"},{"doc":"A module implementing the Crux.Interaction.Executor behaivor.","ref":"Crux.Interaction.Executor.html#t:t/0","title":"Crux.Interaction.Executor.t/0","type":"type"},{"doc":"Allows you to compose interaction responses. First componse the response wanted through the with_ functions, then pass / pipe the resulting data to the relevant function of the &quot;Response Types&quot; group. Notes: Multiple calls of the same with_ function will override the previous set value. You can pass nil to one of the with_ functions to clear a previously set value. Examples # Send an ephemeral text response with_content ( &quot;Hello there&quot; ) |&gt; with_flags ( 1 &lt;&lt;&lt; 6 ) |&gt; channel_message ( ) # Update a message with_content ( &quot;Current state: \#{ state } &quot; ) |&gt; update_message ( ) # Offer choices as response to an autocomplete interaction with_choices ( [ %{ choice : &quot;One&quot; , 1 } , %{ choice : &quot;Two&quot; , 2 } , %{ choice : &quot;Four&quot; , 4 } ] ) |&gt; autocomplete_result ( ) # Open a modal # MODALS ARE NOT RELEASED / AVAILABLE YET. with_custom_id ( &quot;custom_id&quot; ) |&gt; with_components ( ActionRow . new ( InputText . new ( InputText . text_style_short ( ) , &quot;input_text_1&quot; , &quot;What is your name?&quot; ) ) ) |&gt; modal ( )","ref":"Crux.Interaction.Response.html","title":"Crux.Interaction.Response","type":"module"},{"doc":"Generates a response that displays the user choices to chose from. Only valid as a response to auto complete interactions.","ref":"Crux.Interaction.Response.html#autocomplete_result/1","title":"Crux.Interaction.Response.autocomplete_result/1","type":"function"},{"doc":"Generates a response that responds to an interaction with a message. Not valid for autocomplete interactions.","ref":"Crux.Interaction.Response.html#channel_message/1","title":"Crux.Interaction.Response.channel_message/1","type":"function"},{"doc":"Generates a response that acknowledges an interaction and displays a loading state to the user. A response must be sent later manually. Not valid for autocomplete interactions.","ref":"Crux.Interaction.Response.html#deferred_channel_message/0","title":"Crux.Interaction.Response.deferred_channel_message/0","type":"function"},{"doc":"Generates a response that acknowledges a component interaction and displays no loading state to the user. An update must be sent later manually. Only valid as response to component interactions.","ref":"Crux.Interaction.Response.html#deferred_update_message/0","title":"Crux.Interaction.Response.deferred_update_message/0","type":"function"},{"doc":"Generates a response that displays a modal to the user. MODALS ARE NOT RELEASED / AVAILABLE YET. Not valid as response to a modal interaction.","ref":"Crux.Interaction.Response.html#modal/1","title":"Crux.Interaction.Response.modal/1","type":"function"},{"doc":"Generates a response that acknowledges a ping. Only valid as response to Ping interactions.","ref":"Crux.Interaction.Response.html#pong/0","title":"Crux.Interaction.Response.pong/0","type":"function"},{"doc":"Generates a response that updates the message the component was attached to. Only valid as response to component interactions.","ref":"Crux.Interaction.Response.html#update_message/1","title":"Crux.Interaction.Response.update_message/1","type":"function"},{"doc":"Controls what (kind of) mentions to resolve from the content. For more information see the Discord Developer Documentation .","ref":"Crux.Interaction.Response.html#with_allowed_mentions/2","title":"Crux.Interaction.Response.with_allowed_mentions/2","type":"function"},{"doc":"What attachments to keep when editing a message. Not setting / clearing this means that all attachments will be kept. An empty list means that all attachments will be removed.","ref":"Crux.Interaction.Response.html#with_attachments/2","title":"Crux.Interaction.Response.with_attachments/2","type":"function"},{"doc":"The choices to provide.","ref":"Crux.Interaction.Response.html#with_choices/2","title":"Crux.Interaction.Response.with_choices/2","type":"function"},{"doc":"Components to use in a modal or message.","ref":"Crux.Interaction.Response.html#with_components/2","title":"Crux.Interaction.Response.with_components/2","type":"function"},{"doc":"The message content to use.","ref":"Crux.Interaction.Response.html#with_content/2","title":"Crux.Interaction.Response.with_content/2","type":"function"},{"doc":"The custom id to use. MODALS ARE NOT RELEASED / AVAILABLE YET.","ref":"Crux.Interaction.Response.html#with_custom_id/2","title":"Crux.Interaction.Response.with_custom_id/2","type":"function"},{"doc":"The embeds to use, may be up to 10.","ref":"Crux.Interaction.Response.html#with_embeds/2","title":"Crux.Interaction.Response.with_embeds/2","type":"function"},{"doc":"The files to use.","ref":"Crux.Interaction.Response.html#with_files/2","title":"Crux.Interaction.Response.with_files/2","type":"function"},{"doc":"Message flags to use.","ref":"Crux.Interaction.Response.html#with_flags/2","title":"Crux.Interaction.Response.with_flags/2","type":"function"},{"doc":"Whether the message content should use text-to-speech.","ref":"Crux.Interaction.Response.html#with_tts/2","title":"Crux.Interaction.Response.with_tts/2","type":"function"},{"doc":"Data used to respond to an autocomplete interaction. Limits: :choices - Max of 25 in length For more information see the Discord Developer Documentation .","ref":"Crux.Interaction.Response.html#t:autocomplete_data/0","title":"Crux.Interaction.Response.autocomplete_data/0","type":"type"},{"doc":"A choice to be used in with_choices/1 ,2. Limits: :name - Length must be in [1,100] . :value - If string, length must be in [1,100] , otherwise for integer and double value must be in [-2^53,+2^53] . For more information see the Discord Developer Documentation .","ref":"Crux.Interaction.Response.html#t:choice/0","title":"Crux.Interaction.Response.choice/0","type":"type"},{"doc":"Used when responding to an interaction with a message. For more information see the Discord Developer Documentation .","ref":"Crux.Interaction.Response.html#t:message_data/0","title":"Crux.Interaction.Response.message_data/0","type":"type"},{"doc":"Used when responding to an interaction with a modal. MODALS ARE NOT RELEASED / AVAILABLE YET. For more information see the Discord Developer Documentation .","ref":"Crux.Interaction.Response.html#t:modal_data/0","title":"Crux.Interaction.Response.modal_data/0","type":"type"},{"doc":"Wrapper plug around Crux.Interaction.Executor . You need to supply an executor module as :executor to this plug. plug Crux.Interaction.Plug , executor : Your.Executor Note that handler functions will receive a context with a conn key. If handler functions return a new context it must include that conn key with the (updated) conn struct. Responds with 405 if the http verb is not POST . In order to use this plug, you need to add plug to your dependencies. If you want to respond with files, you also need to add mimerl and hackney (for hackney_multipart ) to your dependencies.","ref":"Crux.Interaction.Plug.html","title":"Crux.Interaction.Plug","type":"module"},{"doc":"","ref":"Crux.Interaction.Plug.html#resolve_files/1","title":"Crux.Interaction.Plug.resolve_files/1","type":"function"},{"doc":"To be plugged into Plug.Parsers as a body_reader . plug Plug.Parser , # ... body_reader : { Crux.Interaction.Plug.CacheBodyReader , :read_body , [ ] } , # ... Caching the raw body prior to parsing it is necessary to be able to validate Discord's signature via Crux.Interaction.Plug.VerifyHeader . The raw body will then be placed into conn.private[:raw_body] . Taken from https://hexdocs.pm/plug/Plug.Parsers.html#module-custom-body-reader and modified a bit In order to use this module, you need to add plug to your dependencies.","ref":"Crux.Interaction.Plug.CacheBodyReader.html","title":"Crux.Interaction.Plug.CacheBodyReader","type":"module"},{"doc":"Get the cached body, returns nil if no body was read.","ref":"Crux.Interaction.Plug.CacheBodyReader.html#read_cached_body/1","title":"Crux.Interaction.Plug.CacheBodyReader.read_cached_body/1","type":"function"},{"doc":"Verifies the x-signature-ed25519 and x-signature-timestamp headers Discord sends along every payload to ensure that only requests that are coming from Discord are processed. If verification fails, this plug logs a warn and responds with 401 . Note that Discord automatically tests your endpoint using invalid headers to ensure this check is working. If the http verb is not POST , this plug acts as a noop. Examples plug Crux.Interaction.Plug.VerifyHeader , public_key : &quot;some-public-key&quot; # For runtime configuration plug Crux.Interaction.Plug.VerifyHeader , public_key : { __MODULE__ , :fetch_public_key! , [ ] } Make sure you properly configured Crux.Interaction.Plug.CacheBodyReader , otherwise an error will be raised. In order to use this plug, you need to add plug and crux_crypto to your dependencies. Errors There currently are the following errors (for the sake of documenting them): :missing_timestamp - When the x-signature-timestamp header is missing :missing_signature - When the x-signature-ed25519 header is missing :malformed_signature - When the signature couldn't be decoded :mismatching_signature - When the signature was invalid","ref":"Crux.Interaction.Plug.VerifyHeader.html","title":"Crux.Interaction.Plug.VerifyHeader","type":"module"},{"doc":"Raised when an invalid application command chat input choice name or description was specified. Also raised when too many or duplicated choices were specified. See valid_name?/1 and valid_choice?/2","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice","type":"exception"},{"doc":"Whether the given value is valid for a chat input choice value. Choice value validity depend on their enclosing option: string/3 -&gt; must be a [1,100] characters long string integer/3 -&gt; must be an integer in [-2^53,+2^53] number/3 -&gt; must be a double in [-2^53,+2^53]","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice.html#valid_value?/2","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidChoice.valid_value?/2","type":"function"},{"doc":"Raised when an invalid @default_permission was specified for an application command chat input. I.e. not a boolean. See: valid?/1","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission","type":"exception"},{"doc":"Whether th given term is a valid default permission.","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission.html#valid?/1","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDefaultPermission.valid?/1","type":"function"},{"doc":"Raised when an invalid description was specified anywhere. See: valid?/1","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription","type":"exception"},{"doc":"Whether the given description is valid for a chat input or a chat input option. A description is valid, if it's [1,100] characters long.","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription.html#valid?/1","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidDescription.valid?/1","type":"function"},{"doc":"Raised when an invalid name was specified anywhere. See: valid?/1","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName","type":"exception"},{"doc":"Whether the given name is valid. For choice names: The name must be [1,100] characters long For all else: The name must be [1,32] characters long. For chat inputs additionally: The name must only consist of lowercase characters or - .","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName.html#valid?/2","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidName.valid?/2","type":"function"},{"doc":"Raised when an option is specified where it's not valid. E.g. when a subcommand/4 is specified after a string/2,3 or a choice/2 in a subcommand/4 's do block. Also raised when an invalid option modifier was specified. E.g. when @required is used where it's not allowed. Also raised when too many or duplicated options were specified.","ref":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidState.html","title":"Crux.Interaction.ApplicationCommand.Exceptions.InvalidState","type":"exception"}]